var process_count_consumer = 8

var process_count_headsconsumer = 1

var process_count_kafka = 1

var process_count_zookeeper = 1

// Dataframe
var consumer = stream
    |from()
        .measurement('procstat_lookup')
        .where(lambda: isPresent("pattern") AND "pattern" == 'vcsreplicator-consumer')
        .groupBy('host')

var headconsumer = stream
    |from()
        .measurement('procstat_lookup')
        .where(lambda: isPresent("pattern") AND "pattern" == 'vcsreplicator-headsconsumer')
        .groupBy('host')

var kafka = stream
    |from()
        .measurement('procstat_lookup')
        .where(lambda: isPresent("pattern") AND "pattern" == 'kafka.Kafka')
        .groupBy('host')

var zookeeper = stream
    |from()
        .measurement('procstat_lookup')
        .where(lambda: isPresent("pattern") AND "pattern" == 'org.apache.zookeeper.server.quorum.QuorumPeerMain')
        .groupBy('host')

// Thresholds
var consumer_alert = consumer
    |alert()
        .message('*[{{ index .Tags "host" }}]* vcsreplicator consumer is {{ .Level }}: {{ index .Fields "pid_count" }}/' + string(process_count_consumer) + ' vcsreplicator processes running')
        .crit(lambda: "pid_count" < process_count_consumer)

var headsconsumer_alert = headconsumer
    |alert()
        .message('*[{{ index .Tags "host" }}]* vcsreplicator heads is {{ .Level }}: {{ index .Fields "pid_count" }}/' + string(process_count_headsconsumer) + ' heads processes running')
        .crit(lambda: "pid_count" < process_count_headsconsumer)

var kafka_alert = kafka
    |alert()
        .message('*[{{ index .Tags "host" }}]* Kafka is {{ .Level }}: {{ index .Fields "pid_count" }}/' + string(process_count_kafka) + ' Kafka processes running')
        .crit(lambda: "pid_count" < process_count_kafka)

var zookeeper_alert = zookeeper
    |alert()
        .message('*[{{ index .Tags "host" }}]* Zookeeper is {{ .Level }}: {{ index .Fields "pid_count" }}/' + string(process_count_zookeeper) + ' Zookeeper processes running')
        .crit(lambda: "pid_count" < process_count_zookeeper)

// Alert
consumer_alert
        .stateChangesOnly(2m)
        .slack()

headsconsumer_alert
        .stateChangesOnly(2m)
        .slack()

kafka_alert
        .stateChangesOnly(2m)
        .slack()

zookeeper_alert
        .stateChangesOnly(2m)
        .slack()
