// Dataframe
var dataframe_consumer = stream
    |from()
        .measurement('exec_vcsreplicator_consumer')
        .groupBy('host', 'partition')
    |eval(lambda: int("available") - int("offset"))
        .as('message_lag')

var dataframe_heads = stream
    |from()
        .measurement('exec_vcsreplicator_headsconsumer')
        .groupBy('host', 'partition')
    |eval(lambda: int("available") - int("offset"))
        .as('message_lag')

var dataframe_aggregator = stream
    |from()
        .measurement('exec_vcsreplicator_aggregator')
        .groupBy('host', 'partition')
    |eval(lambda: int("consumed_offset") - int("acked_offset"))
        .as('message_lag')

var dataframe_aggregator_pending = stream
    |from()
        .measurement('exec_vcsreplicator_aggregator_pending')
        .groupBy('host', 'partition')
    |eval(lambda: int("consumed_offset") - int("acked_offset"))
        .as('message_lag')

// Threshold
var alert_message_lag_consumer = dataframe_consumer
    |alert()
        .warn(lambda: abs("message_lag") > 30)
        .crit(lambda: abs("message_lag") > 50)
        .warnReset(lambda: abs("message_lag") < 2)
        .critReset(lambda: abs("message_lag") < 2)
        .message('*[{{ index .Tags "host" }}]* vcsreplicator-consumer partition {{ index .Tags "partition" }} is *{{ .Level }}*: lagging by {{ index .Fields "message_lag" }} messages')

var alert_time_lag_consumer = dataframe_consumer
    |alert()
        .warn(lambda: "lag_time" > 30)
        .crit(lambda: "lag_time" > 60)
        .warnReset(lambda: "lag_time" <= 3)
        .critReset(lambda: "lag_time" <= 3)
        .message('*[{{ index .Tags "host" }}]* vcsreplicator-consumer partition {{ index .Tags "partition" }} is *{{ .Level }}*: lagging by {{ .lag_time }} messages')

var alert_message_lag_heads = dataframe_heads
    |alert()
        .warn(lambda: abs("message_lag") > 30)
        .crit(lambda: abs("message_lag") > 50)
        .warnReset(lambda: abs("message_lag") < 2)
        .critReset(lambda: abs("message_lag") < 2)
        .message('*[{{ index .Tags "host" }}]* vcsreplicator-heads partition {{ index .Tags "partition" }} is *{{ .Level }}*: lagging by {{ index .Fields "message_lag" }} messages')

var alert_time_lag_heads = dataframe_heads
    |alert()
        .warn(lambda: "lag_time" > 30)
        .crit(lambda: "lag_time" > 60)
        .warnReset(lambda: "lag_time" <= 3)
        .critReset(lambda: "lag_time" <= 3)
        .message('*[{{ index .Tags "host" }}]* vcsreplicator-heads partition {{ index .Tags "partition" }} is *{{ .Level }}*: lagging by {{ index .Fields "lag_time" }} messages')

var alert_message_lag_aggregator = dataframe_aggregator
    |alert()
        .warn(lambda: abs("message_lag") > 30)
        .crit(lambda: abs("message_lag") > 50)
        .warnReset(lambda: abs("message_lag") < 2)
        .critReset(lambda: abs("message_lag") < 2)
        .message('*[{{ index .Tags "host" }}]* vcsreplicator-aggregator partition {{ index .Tags "partition" }} is *{{ .Level }}*: lagging by {{ index .Fields "message_lag" }} messages')

var alert_message_lag_aggregator_pending = dataframe_aggregator_pending
    |alert()
        .warn(lambda: abs("message_lag") > 30)
        .crit(lambda: abs("message_lag") > 50)
        .warnReset(lambda: abs("message_lag") < 2)
        .critReset(lambda: abs("message_lag") < 2)
        .message('*[{{ index .Tags "host" }}]* vcsreplicator-pending partition {{ index .Tags "partition" }} is *{{ .Level }}*: lagging by {{ index .Fields "message_lag" }} messages')

// Alert
alert_time_lag_consumer
        .stateChangesOnly(2m)
        .slack()

alert_message_lag_consumer
        .stateChangesOnly(2m)
        .slack()

alert_time_lag_heads
        .stateChangesOnly(2m)
        .slack()

alert_message_lag_heads
        .stateChangesOnly(2m)
        .slack()

alert_message_lag_aggregator
        .stateChangesOnly(2m)
        .slack()

alert_message_lag_aggregator_pending
        .stateChangesOnly(2m)
        .slack()
