#!/usr/bin/python
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# There is a race condition between starting Zookeeper and Kafka at
# the same time. This script exists to delay the start of Kafka until
# Zookeeper is ready.

from __future__ import absolute_import, unicode_literals

import os
import socket
import time

def send_zk_command(host, port, command):
    """Send a ZooKeeper 4 letter command to a host:port."""
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(5.0)
    s.connect((host, int(port)))
    result = []
    try:
        s.sendall(command)
        s.shutdown(socket.SHUT_WR)

        while True:
            data = s.recv(4096)
            if not data:
                break
            result.append(data)
    finally:
        s.close()

    return ''.join(result)


with open('/kafka-servers', 'rb') as fh:
    lines = fh.read().splitlines()

servers = lines[3:]
hostnames = [s.split(':')[0] for s in servers]

timeout = 20.0
start = time.time()

# Do one pass until all sockets start listening.
for hostname in hostnames:
    while True:
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(1.0)
            s.connect((hostname, 2181))
            break
        except socket.error:
            if time.time() - start > timeout:
                raise Exception('timeout reached waiting for ZooKeeper socket')

            time.sleep(0.1)

# Do another pass to query cluster state.
for hostname in hostnames:
    while True:
        try:
            res = send_zk_command(hostname, 2181, 'ruok')
            if res == 'imok':
                break
        except Exception:
            if time.time() - start > timeout:
                raise Exception('timeout')
            time.sleep(0.1)

    while True:
        try:
            res = send_zk_command(hostname, 2181, 'isro')
            if res == 'rw':
                break
        except Exception:
            if time.time() - start > timeout:
                raise Exception('timeout')
            time.sleep(0.1)

# And wait until all followers are present.
for hostname in hostnames:
    while True:
        try:
            res = send_zk_command(hostname, 2181, 'mntr').rstrip()
            attrs = {}
            for line in res.splitlines():
                k, v = line.split('\t')

                if k not in ('zk_version', 'zk_server_state'):
                    v = int(v)

                attrs[k] = v

            if attrs['zk_server_state'] != 'leader':
                break

            if attrs['zk_followers'] == len(hostnames) - 1:
                break

            raise Exception('expected followers count wrong')

        except Exception:
            if time.time() - start > timeout:
                raise Exception('timeout')

            time.sleep(0.1)

env = dict(os.environ)
env.update({
    'KAFKA_GC_LOG_OPTS': '-Xloggc:/var/log/kafka/server-gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M',
    'KAFKA_LOG4J_OPTS': '-Dlog4j.configuration=file:/etc/kafka/log4j.properties',
    'KAFKA_HEAP_OPTS': '-Xmx512m',
})

# -daemon here causes same Java process to be executed with "nohup"
os.execle('/opt/kafka/bin/kafka-server-start.sh', '-daemon', '/etc/kafka/server.properties', env)
